// src/routes/auth.js
import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { getRepository } from 'typeorm';
import { User } from '../entity/User.js';

const router = express.Router();
const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';

// Signup route - default role Employee
router.post('/signup', async (req, res) => {
  try {
    const userRepo = getRepository(User);
    const { username, password } = req.body;

    const existing = await userRepo.findOne({ where: { username } });
    if (existing) return res.status(400).json({ message: 'Username taken' });

    const hashed = await bcrypt.hash(password, 10);
    const user = userRepo.create({ username, password: hashed, role: 'Employee' });
    await userRepo.save(user);

    res.status(201).json({ message: 'User created' });
  } catch (e) {
    res.status(500).json({ message: 'Internal error' });
  }
});

// Login route
router.post('/login', async (req, res) => {
  try {
    const userRepo = getRepository(User);
    const { username, password } = req.body;

    const user = await userRepo.findOne({ where: { username } });
    if (!user) return res.status(400).json({ message: 'Invalid credentials' });

    const match = await bcrypt.compare(password, user.password);
    if (!match) return res.status(400).json({ message: 'Invalid credentials' });

    const token = jwt.sign({ id: user.id, role: user.role }, JWT_SECRET, { expiresIn: '1h' });
    res.json({ token, role: user.role });
  } catch (e) {
    res.status(500).json({ message: 'Internal error' });
  }
});

export default router;
// src/middleware/auth.js
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';

export const authenticateJWT = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ message: 'No token' });

  const token = authHeader.split(' ')[1];
  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: 'Invalid token' });
    req.user = user;
    next();
  });
};

export const authorizeRoles = (...roles) => (req, res, next) => {
  if (!roles.includes(req.user.role)) {
    return res.status(403).json({ message: 'Forbidden' });
  }
  next();
};
